from flask import Flask, render_template_string, request, jsonify, send_file
import requests
import json
import random
from datetime import datetime
import os
import base64
from urllib.parse import quote_plus

app = Flask(__name__)

class RealAPIHotelGatherer:
    def __init__(self):
        self.headers = {
            'User-Agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36'
        }
        # VOTRE VRAIE CL√â API GOOGLE
        self.google_api_key = "AIzaSyD3nzS1H0c4jXn5MkRzCQX6q4OA2Ivdyp8"
        
    def get_real_hotel_photos(self, hotel_name, destination):
        """VRAI appel API Google Places pour r√©cup√©rer les VRAIES photos de l'h√¥tel"""
        try:
            print(f"üì∏ APPEL API Google Places Photos pour {hotel_name}")
            
            # 1. Chercher l'h√¥tel exact
            search_url = "https://maps.googleapis.com/maps/api/place/textsearch/json"
            search_params = {
                'query': f'"{hotel_name}" "{destination}" hotel',
                'key': self.google_api_key,
                'fields': 'photos,place_id'
            }
            
            search_response = requests.get(search_url, params=search_params, timeout=15)
            print(f"üîç Recherche API Status: {search_response.status_code}")
            
            if search_response.status_code == 200:
                search_data = search_response.json()
                print(f"üîç R√©sultats trouv√©s: {len(search_data.get('results', []))}")
                
                if search_data.get('results'):
                    place_id = search_data['results'][0].get('place_id')
                    
                    # 2. R√©cup√©rer les d√©tails avec photos
                    details_url = "https://maps.googleapis.com/maps/api/place/details/json"
                    details_params = {
                        'place_id': place_id,
                        'fields': 'photos',
                        'key': self.google_api_key
                    }
                    
                    details_response = requests.get(details_url, params=details_params, timeout=15)
                    print(f"üì∏ Photos API Status: {details_response.status_code}")
                    
                    if details_response.status_code == 200:
                        details_data = details_response.json()
                        photos = details_data.get('result', {}).get('photos', [])
                        
                        # 3. Construire les URLs des vraies photos
                        photo_urls = []
                        for photo in photos[:6]:  # Maximum 6 photos
                            photo_reference = photo.get('photo_reference')
                            if photo_reference:
                                photo_url = f"https://maps.googleapis.com/maps/api/place/photo"
                                photo_url += f"?maxwidth=800&photo_reference={photo_reference}&key={self.google_api_key}"
                                photo_urls.append(photo_url)
                        
                        print(f"‚úÖ {len(photo_urls)} VRAIES photos r√©cup√©r√©es de l'h√¥tel")
                        return photo_urls
            
            print("‚ùå Aucune photo trouv√©e via API")
            return []
            
        except Exception as e:
            print(f"‚ùå Erreur API Photos: {e}")
            return []
    
    def get_real_hotel_reviews(self, hotel_name, destination):
        """VRAI appel API Google Places pour r√©cup√©rer les VRAIS avis"""
        try:
            print(f"üìù APPEL API Google Places Reviews pour {hotel_name}")
            
            # 1. Chercher l'h√¥tel exact
            search_url = "https://maps.googleapis.com/maps/api/place/textsearch/json"
            search_params = {
                'query': f'"{hotel_name}" "{destination}" hotel',
                'key': self.google_api_key
            }
            
            search_response = requests.get(search_url, params=search_params, timeout=15)
            print(f"üîç Recherche Reviews Status: {search_response.status_code}")
            
            if search_response.status_code == 200:
                search_data = search_response.json()
                
                if search_data.get('results'):
                    place_id = search_data['results'][0].get('place_id')
                    
                    # 2. R√©cup√©rer les avis d√©taill√©s
                    details_url = "https://maps.googleapis.com/maps/api/place/details/json"
                    details_params = {
                        'place_id': place_id,
                        'fields': 'reviews,rating,user_ratings_total',
                        'key': self.google_api_key,
                        'language': 'fr'
                    }
                    
                    details_response = requests.get(details_url, params=details_params, timeout=15)
                    print(f"üìù Reviews API Status: {details_response.status_code}")
                    
                    if details_response.status_code == 200:
                        details_data = details_response.json()
                        result = details_data.get('result', {})
                        
                        reviews = []
                        raw_reviews = result.get('reviews', [])
                        
                        # Filtrer les bons avis (4-5 √©toiles)
                        for review in raw_reviews:
                            rating = review.get('rating', 0)
                            if rating >= 4:
                                reviews.append({
                                    'rating': '‚≠ê' * rating,
                                    'rating_numeric': rating,
                                    'author': review.get('author_name', 'Client Google'),
                                    'text': review.get('text', '')[:400] + '...' if len(review.get('text', '')) > 400 else review.get('text', ''),
                                    'date': review.get('relative_time_description', ''),
                                    'source': 'Google Places API'
                                })
                        
                        hotel_rating = result.get('rating', 0)
                        total_reviews = result.get('user_ratings_total', 0)
                        
                        print(f"‚úÖ {len(reviews)} VRAIS avis r√©cup√©r√©s (Note: {hotel_rating}/5, Total: {total_reviews})")
                        return {
                            'reviews': reviews,
                            'rating': hotel_rating,
                            'total_reviews': total_reviews
                        }
            
            print("‚ùå Aucun avis trouv√© via API")
            return {'reviews': [], 'rating': 0, 'total_reviews': 0}
            
        except Exception as e:
            print(f"‚ùå Erreur API Reviews: {e}")
            return {'reviews': [], 'rating': 0, 'total_reviews': 0}
    
    def get_real_youtube_videos(self, hotel_name, destination):
        """VRAI appel API YouTube pour chercher des vid√©os sp√©cifiques √† l'h√¥tel"""
        try:
            print(f"üé• APPEL API YouTube pour {hotel_name}")
            
            # Utiliser la m√™me cl√© Google pour YouTube API
            youtube_url = "https://www.googleapis.com/youtube/v3/search"
            youtube_params = {
                'part': 'snippet',
                'q': f'"{hotel_name}" "{destination}" hotel review tour',
                'type': 'video',
                'maxResults': 4,
                'order': 'relevance',
                'key': self.google_api_key
            }
            
            youtube_response = requests.get(youtube_url, params=youtube_params, timeout=15)
            print(f"üé• YouTube API Status: {youtube_response.status_code}")
            
            if youtube_response.status_code == 200:
                youtube_data = youtube_response.json()
                videos = []
                
                for item in youtube_data.get('items', []):
                    video_id = item.get('id', {}).get('videoId')
                    if video_id:
                        videos.append({
                            'id': video_id,
                            'title': item.get('snippet', {}).get('title', ''),
                            'description': item.get('snippet', {}).get('description', '')[:100] + '...'
                        })
                
                print(f"‚úÖ {len(videos)} VRAIES vid√©os YouTube trouv√©es")
                return videos
            
            print("‚ùå Aucune vid√©o trouv√©e via API YouTube")
            return []
            
        except Exception as e:
            print(f"‚ùå Erreur API YouTube: {e}")
            return []
    
    def get_real_gemini_attractions(self, destination):
        """VRAI appel API Gemini pour les points d'int√©r√™t"""
        try:
            print(f"ü§ñ APPEL API Gemini pour {destination}")
            
            import google.generativeai as genai
            
            # Configuration avec votre cl√© Google
            genai.configure(api_key=self.google_api_key)
            model = genai.GenerativeModel('gemini-pro')
            
            prompt = f"""
            Donne-moi exactement 8 points d'int√©r√™t touristiques r√©els et v√©rifi√©s pour {destination}.
            R√©ponds UNIQUEMENT en format JSON valide, sans texte avant ou apr√®s :
            {{
                "attractions": [
                    {{
                        "name": "Nom exact de l'attraction",
                        "type": "plage",
                        "description": "Description pr√©cise en fran√ßais"
                    }},
                    {{
                        "name": "Nom exact de l'attraction",
                        "type": "culture",
                        "description": "Description pr√©cise en fran√ßais"
                    }},
                    {{
                        "name": "Nom exact de l'attraction",
                        "type": "gastronomie",
                        "description": "Description pr√©cise en fran√ßais"
                    }},
                    {{
                        "name": "Nom exact de l'attraction",
                        "type": "activite",
                        "description": "Description pr√©cise en fran√ßais"
                    }}
                ]
            }}
            """
            
            response = model.generate_content(prompt)
            print(f"ü§ñ Gemini API Response re√ßue")
            
            # Nettoyer la r√©ponse pour extraire le JSON
            response_text = response.text.strip()
            
            # Supprimer les balises markdown si pr√©sentes
            if response_text.startswith('```json'):
                response_text = response_text[7:]
            if response_text.endswith('```'):
                response_text = response_text[:-3]
            
            response_text = response_text.strip()
            
            # Parser le JSON
            attractions_data = json.loads(response_text)
            attractions = attractions_data.get('attractions', [])
            
            print(f"‚úÖ {len(attractions)} VRAIES attractions r√©cup√©r√©es via Gemini")
            return attractions
            
        except Exception as e:
            print(f"‚ùå Erreur API Gemini: {e}")
            # Fallback minimal
            return [
                {"name": "Centre-ville", "type": "culture", "description": "Exploration du centre historique"},
                {"name": "Plage principale", "type": "plage", "description": "Baignade et d√©tente"},
                {"name": "Restaurant local", "type": "gastronomie", "description": "Cuisine authentique"},
                {"name": "Randonn√©e", "type": "activite", "description": "D√©couverte nature"}
            ]
    
    def gather_all_real_data(self, hotel_name, destination):
        """Collecte TOUTES les donn√©es via les vraies APIs"""
        print(f"üöÄ COLLECTE DE DONN√âES R√âELLES pour {hotel_name} √† {destination}")
        
        # Appels API parall√®les
        photos = self.get_real_hotel_photos(hotel_name, destination)
        reviews_data = self.get_real_hotel_reviews(hotel_name, destination)
        videos = self.get_real_youtube_videos(hotel_name, destination)
        attractions = self.get_real_gemini_attractions(destination)
        
        # Structurer les attractions par cat√©gorie
        attractions_by_category = {
            'plages': [],
            'culture': [],
            'gastronomie': [],
            'activites': []
        }
        
        for attraction in attractions:
            category = attraction.get('type', 'activites')
            if category == 'activite':
                category = 'activites'
            if category not in attractions_by_category:
                category = 'activites'
            attractions_by_category[category].append(attraction.get('name', ''))
        
        return {
            'photos': photos,
            'reviews': reviews_data.get('reviews', []),
            'hotel_rating': reviews_data.get('rating', 0),
            'total_reviews': reviews_data.get('total_reviews', 0),
            'videos': videos,
            'attractions': attractions_by_category
        }

# Interface HTML (identique)
INTERFACE_HTML = """
<!DOCTYPE html>
<html lang="fr">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>üåü G√©n√©rateur de Pages Voyage - VRAIES APIs</title>
    <style>
        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            margin: 0;
            padding: 20px;
            min-height: 100vh;
        }
        .container {
            max-width: 800px;
            margin: 0 auto;
            background: white;
            border-radius: 20px;
            box-shadow: 0 20px 40px rgba(0,0,0,0.1);
            overflow: hidden;
        }
        .header {
            background: linear-gradient(135deg, #3B82F6 0%, #60A5FA 100%);
            color: white;
            padding: 30px;
            text-align: center;
        }
        .header h1 {
            margin: 0;
            font-size: 2.5em;
            font-weight: 300;
        }
        .form-container {
            padding: 40px;
        }
        .form-group {
            margin-bottom: 25px;
        }
        label {
            display: block;
            margin-bottom: 8px;
            font-weight: 600;
            color: #333;
        }
        input, select {
            width: 100%;
            padding: 12px;
            border: 2px solid #e1e5e9;
            border-radius: 8px;
            font-size: 16px;
            transition: border-color 0.3s;
        }
        input:focus, select:focus {
            outline: none;
            border-color: #3B82F6;
        }
        .form-row {
            display: flex;
            gap: 20px;
        }
        .form-row .form-group {
            flex: 1;
        }
        .generate-btn {
            background: linear-gradient(45deg, #ff6b6b, #ee5a24);
            color: white;
            border: none;
            padding: 15px 40px;
            border-radius: 25px;
            font-size: 18px;
            font-weight: 600;
            cursor: pointer;
            transition: all 0.3s;
            width: 100%;
        }
        .generate-btn:hover {
            transform: translateY(-2px);
            box-shadow: 0 10px 25px rgba(255, 107, 107, 0.3);
        }
        .loading {
            display: none;
            text-align: center;
            padding: 30px;
            color: #3B82F6;
        }
        .loading-spinner {
            border: 4px solid #f3f3f3;
            border-top: 4px solid #3B82F6;
            border-radius: 50%;
            width: 40px;
            height: 40px;
            animation: spin 1s linear infinite;
            margin: 0 auto 20px;
        }
        @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }
        .result {
            display: none;
            padding: 30px;
            background: #f8f9fa;
            border-top: 1px solid #e1e5e9;
        }
        .success {
            color: #28a745;
            font-size: 18px;
            font-weight: 600;
        }
        .error {
            color: #dc3545;
            font-size: 18px;
            font-weight: 600;
        }
        .download-btn {
            background: #28a745;
            color: white;
            border: none;
            padding: 12px 30px;
            border-radius: 8px;
            font-size: 16px;
            font-weight: 600;
            cursor: pointer;
            text-decoration: none;
            display: inline-block;
            margin-top: 15px;
            transition: background 0.3s;
        }
        .download-btn:hover {
            background: #218838;
        }
        .stats {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(150px, 1fr));
            gap: 15px;
            margin-top: 20px;
        }
        .stat-item {
            background: white;
            padding: 15px;
            border-radius: 8px;
            text-align: center;
            box-shadow: 0 2px 10px rgba(0,0,0,0.1);
        }
        .stat-number {
            font-size: 24px;
            font-weight: bold;
            color: #3B82F6;
        }
        .stat-label {
            color: #666;
            font-size: 14px;
        }
        .api-info {
            background: #e8f5e8;
            padding: 20px;
            border-radius: 8px;
            margin-bottom: 20px;
        }
        .api-info h4 {
            color: #2d5a2d;
            margin-top: 0;
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <h1>üåü G√©n√©rateur avec VRAIES APIs</h1>
            <p>Google Places + YouTube + Gemini = Donn√©es 100% r√©elles !</p>
        </div>
        
        <div class="form-container">
            <div class="api-info">
                <h4>üîß VRAIES APIs ACTIV√âES</h4>
                <p><strong>‚úÖ Google Places API :</strong> Vraies photos et avis de l'h√¥tel</p>
                <p><strong>‚úÖ YouTube API :</strong> Vraies vid√©os sp√©cifiques √† l'h√¥tel</p>
                <p><strong>‚úÖ Gemini API :</strong> Points d'int√©r√™t r√©els de la destination</p>
                <p><strong>üéØ R√©sultats :</strong> 100% donn√©es r√©elles, 0% contenu g√©n√©rique</p>
            </div>
            
            <form id="voyageForm">
                <div class="form-row">
                    <div class="form-group">
                        <label for="hotel_name">üè® Nom de l'h√¥tel</label>
                        <input type="text" id="hotel_name" name="hotel_name" required 
                               placeholder="ex: Castello Village Resort">
                    </div>
                    <div class="form-group">
                        <label for="destination">üìç Destination</label>
                        <input type="text" id="destination" name="destination" required 
                               placeholder="ex: Sissi, Cr√®te">
                    </div>
                </div>
                
                <div class="form-row">
                    <div class="form-group">
                        <label for="date_start">üóìÔ∏è Date de d√©part</label>
                        <input type="date" id="date_start" name="date_start" required>
                    </div>
                    <div class="form-group">
                        <label for="date_end">üóìÔ∏è Date de retour</label>
                        <input type="date" id="date_end" name="date_end" required>
                    </div>
                </div>
                
                <div class="form-row">
                    <div class="form-group">
                        <label for="price">üí∞ Votre tarif (‚Ç¨)</label>
                        <input type="number" id="price" name="price" required placeholder="ex: 2400">
                    </div>
                    <div class="form-group">
                        <label for="booking_price">üí≥ Tarif Booking.com (‚Ç¨)</label>
                        <input type="number" id="booking_price" name="booking_price" required placeholder="ex: 3270">
                    </div>
                </div>
                
                <div class="form-row">
                    <div class="form-group">
                        <label for="departure_city">‚úàÔ∏è Ville de d√©part</label>
                        <input type="text" id="departure_city" name="departure_city" required placeholder="ex: Charleroi">
                    </div>
                    <div class="form-group">
                        <label for="stars">‚≠ê Nombre d'√©toiles</label>
                        <select id="stars" name="stars">
                            <option value="3">3‚≠ê</option>
                            <option value="4" selected>4‚≠ê</option>
                            <option value="5">5‚≠ê</option>
                        </select>
                    </div>
                </div>
                
                <button type="submit" class="generate-btn">
                    üöÄ G√©n√©rer avec VRAIES APIs
                </button>
            </form>
        </div>
        
        <div class="loading" id="loading">
            <div class="loading-spinner"></div>
            <h3>üîÑ Appels API en cours...</h3>
            <p>üì∏ R√©cup√©ration des VRAIES photos de l'h√¥tel...</p>
            <p>üìù R√©cup√©ration des VRAIS avis clients...</p>
            <p>üé• Recherche des VRAIES vid√©os YouTube...</p>
            <p>ü§ñ G√©n√©ration des points d'int√©r√™t par Gemini...</p>
        </div>
        
        <div class="result" id="result"></div>
    </div>
    
    <script>
        document.getElementById('voyageForm').addEventListener('submit', function(e) {
            e.preventDefault();
            
            const formData = new FormData(this);
            const data = Object.fromEntries(formData);
            
            document.getElementById('loading').style.display = 'block';
            document.getElementById('result').style.display = 'none';
            
            fetch('/generate', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify(data)
            })
            .then(response => response.json())
            .then(data => {
                document.getElementById('loading').style.display = 'none';
                document.getElementById('result').style.display = 'block';
                
                if (data.success) {
                    document.getElementById('result').innerHTML = `
                        <div class="success">
                            ‚úÖ Page g√©n√©r√©e avec VRAIES APIs !
                        </div>
                        <div class="stats">
                            <div class="stat-item">
                                <div class="stat-number">${data.real_photos_count}</div>
                                <div class="stat-label">VRAIES photos h√¥tel</div>
                            </div>
                            <div class="stat-item">
                                <div class="stat-number">${data.real_videos_count}</div>
                                <div class="stat-label">VRAIES vid√©os YouTube</div>
                            </div>
                            <div class="stat-item">
                                <div class="stat-number">${data.real_reviews_count}</div>
                                <div class="stat-label">VRAIS avis clients</div>
                            </div>
                            <div class="stat-item">
                                <div class="stat-number">${data.real_attractions_count}</div>
                                <div class="stat-label">Points d'int√©r√™t r√©els</div>
                            </div>
                            <div class="stat-item">
                                <div class="stat-number">${data.savings}‚Ç¨</div>
                                <div class="stat-label">√âconomies</div>
                            </div>
                        </div>
                        <a href="/download/${data.filename}" class="download-btn" target="_blank">
                            üì• T√©l√©charger la page HTML
                        </a>
                    `;
                } else {
                    document.getElementById('result').innerHTML = `
                        <div class="error">
                            ‚ùå Erreur: ${data.error}
                        </div>
                    `;
                }
            })
            .catch(error => {
                document.getElementById('loading').style.display = 'none';
                document.getElementById('result').style.display = 'block';
                document.getElementById('result').innerHTML = `
                    <div class="error">
                        ‚ùå Erreur de connexion: ${error.message}
                    </div>
                `;
            });
        });
    </script>
</body>
</html>
"""

@app.route('/')
def home():
    return render_template_string(INTERFACE_HTML)

@app.route('/generate', methods=['POST'])
def generate():
    try:
        data = request.get_json()
        print(f"üöÄ G√âN√âRATION AVEC VRAIES APIs pour: {data['hotel_name']} - {data['destination']}")
        
        # Instancier le collecteur de donn√©es r√©elles
        real_gatherer = RealAPIHotelGatherer()
        
        # Collecter TOUTES les donn√©es via les vraies APIs
        real_data = real_gatherer.gather_all_real_data(data['hotel_name'], data['destination'])
        
        # Calculs
        savings = int(data['booking_price']) - int(data['price'])
        
        # G√©n√©ration du HTML avec les VRAIES donn√©es
        html_content = generate_travel_page_real_data(data, real_data, savings)
        
        # Nom du fichier
        filename = f"voyage_real_{data['hotel_name'].replace(' ', '_').lower()}_{datetime.now().strftime('%Y%m%d_%H%M%S')}.html"
        
        # Sauvegarder
        filepath = f"./{filename}"
        with open(filepath, 'w', encoding='utf-8') as f:
            f.write(html_content)
        
        print(f"‚úÖ Page g√©n√©r√©e avec VRAIES APIs: {filepath}")
        
        return jsonify({
            'success': True,
            'filename': filename,
            'real_photos_count': len(real_data['photos']),
            'real_videos_count': len(real_data['videos']),
            'real_reviews_count': len(real_data['reviews']),
            'real_attractions_count': sum(len(attractions) for attractions in real_data['attractions'].values()),
            'savings': savings
        })
        
    except Exception as e:
        print(f"‚ùå Erreur g√©n√©ration: {e}")
        return jsonify({
            'success': False,
            'error': str(e)
        })

@app.route('/download/<filename>')
def download_file(filename):
    """Route pour t√©l√©charger le fichier g√©n√©r√©"""
    try:
        return send_file(filename, as_attachment=True)
    except Exception as e:
        return jsonify({'error': str(e)}), 404

def generate_travel_page_real_data(data, real_data, savings):
    """G√©n√®re le HTML avec les VRAIES donn√©es des APIs"""
    
    # Formatage des dates
    date_start = datetime.strptime(data['date_start'], '%Y-%m-%d').strftime('%d %B %Y')
    date_end = datetime.strptime(data['date_end'], '%Y-%m-%d').strftime('%d %B %Y')
    
    # G√©n√©ration des √©toiles
    stars = "‚≠ê" * int(data['stars'])
    
    # G√©n√©ration de la galerie avec les VRAIES photos
    image_gallery = ""
    hotel_name = data['hotel_name']
    
    if real_data['photos']:
        for img_url in real_data['photos']:
            image_gallery += f'<div class="image-item"><img src="{img_url}" alt="Photo r√©elle de {hotel_name}"></div>\n                    '
    else:
        image_gallery = '<p class="text-center text-gray-500">Aucune photo disponible via API</p>'
    
    # G√©n√©ration des vid√©os avec les VRAIES vid√©os YouTube
    video_section = ""
    if real_data['videos']:
        for i, video in enumerate(real_data['videos'][:2]):
            title = "Visite de l'h√¥tel" if i == 0 else "Pr√©sentation compl√®te"
            video_section += f"""
                <div class="mb-6">
                    <h4 class="font-semibold mb-3 text-center text-sm">{title}</h4>
                    <div class="video-container">
                        <iframe src="https://www.youtube.com/embed/{video['id']}" 
                                title="{video['title']}" 
                                frameborder="0" 
                                allowfullscreen>
                        </iframe>
                    </div>
                    <p class="text-xs text-gray-600 mt-2">{video['title']}</p>
                </div>"""
    
    # G√©n√©ration des VRAIS avis
    reviews_section = ""
    if real_data['reviews']:
        for review in real_data['reviews']:
            reviews_section += f"""
            <div class="bg-gray-50 p-4 rounded-lg">
                <div class="flex items-center mb-2">
                    <span class="text-yellow-500">{review['rating']}</span>
                    <span class="ml-2 font-semibold text-sm">{review['author']}</span>
                    <span class="ml-2 text-xs text-gray-500">{review.get('date', '')}</span>
                </div>
                <p class="text-gray-700 text-xs">"{review['text']}"</p>
                <p class="text-xs text-blue-600 mt-1">Source: {review.get('source', 'API')}</p>
            </div>"""
    else:
        reviews_section = '<p class="text-center text-gray-500">Aucun avis disponible via API</p>'
    
    # G√©n√©ration des attractions avec les VRAIES donn√©es Gemini
    destination_section = ""
    icons = {
        'plages': 'fa-water',
        'culture': 'fa-monument',
        'gastronomie': 'fa-utensils',
        'activites': 'fa-map'
    }
    
    colors = {
        'plages': 'bg-blue-500',
        'culture': 'bg-purple-500',
        'gastronomie': 'bg-green-500',
        'activites': 'bg-orange-500'
    }
    
    categories = {
        'plages': 'Plages paradisiaques',
        'culture': 'Patrimoine culturel',
        'gastronomie': 'Gastronomie authentique',
        'activites': 'Activit√©s & D√©couverte'
    }
    
    for category, attractions in real_data['attractions'].items():
        if attractions:
            attraction_text = ', '.join(attractions[:2])
            destination_section += f"""
            <div class="flex items-start space-x-4">
                <div class="feature-icon {colors[category]}"><i class="fas {icons[category]}"></i></div>
                <div>
                    <h4 class="font-semibold text-sm">{categories[category]}</h4>
                    <p class="text-gray-600 text-xs">{attraction_text}</p>
                </div>
            </div>"""

    # Template HTML avec les VRAIES donn√©es
    html_template = f"""<!DOCTYPE html>
<html lang="fr">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Voyages Privil√®ges - {data['hotel_name']} {data['destination']} - VRAIES APIs</title>
    <link href="https://cdn.jsdelivr.net/npm/tailwindcss@2.2.19/dist/tailwind.min.css" rel="stylesheet">
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/@fortawesome/fontawesome-free@6.4.0/css/all.min.css">
    <link href="https://fonts.googleapis.com/css2?family=Playfair+Display:wght@400;600;700&family=Poppins:wght@300;400;500;600;700&display=swap" rel="stylesheet">
    <style>
        body {{
            font-family: 'Poppins', sans-serif;
            line-height: 1.6;
            background-color: #f4f4f5;
        }}
        .instagram-card {{
            background: white;
            border-radius: 20px;
            box-shadow: 0 10px 30px rgba(0,0,0,0.08);
            overflow: hidden;
            margin-bottom: 20px;
        }}
        .story-card {{
            background: linear-gradient(135deg, #3B82F6 0%, #60A5FA 100%);
            border-radius: 25px;
            padding: 25px;
            margin-bottom: 20px;
            color: white;
            text-align: center;
            box-shadow: 0 10px 30px rgba(59, 130, 246, 0.3);
        }}
        .video-container {{
            position: relative;
            padding-bottom: 56.25%;
            height: 0;
            overflow: hidden;
            border-radius: 15px;
        }}
        .video-container iframe {{
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
        }}
        .image-grid {{
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
            gap: 15px;
        }}
        .image-item {{
            border-radius: 15px;
            overflow: hidden;
            position: relative;
        }}
        .image-item img {{
            width: 100%;
            height: 200px;
            object-fit: cover;
            transition: transform 0.3s ease;
        }}
        .image-item:hover img {{
            transform: scale(1.1);
        }}
        .cta-button {{
            background: linear-gradient(45deg, #ff6b6b, #ee5a24);
            color: white;
            border: none;
            padding: 15px 30px;
            border-radius: 25px;
            font-weight: 600;
            text-decoration: none;
            display: inline-block;
            transition: all 0.3s ease;
            box-shadow: 0 5px 15px rgba(255, 107, 107, 0.3);
        }}
        .cta-button:hover {{
            transform: translateY(-3px);
            box-shadow: 0 10px 25px rgba(255, 107, 107, 0.5);
            color: white;
        }}
        .feature-icon {{
            width: 45px;
            height: 45px;
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            color: white;
            font-size: 18px;
            flex-shrink: 0;
        }}
        .section-title {{
            font-family: 'Playfair Display', serif;
            font-weight: 700;
            text-align: center;
            margin-bottom: 30px;
            color: #333;
        }}
        .instagram-header {{
            background: white;
            color: #333;
            padding: 20px;
            border-radius: 20px;
            margin-bottom: 20px;
            text-align: center;
            box-shadow: 0 10px 30px rgba(0,0,0,0.08);
        }}
        .mobile-optimized {{
            max-width: 600px;
            margin: 0 auto;
            padding: 10px;
        }}
        .comparison-card {{
            background: white;
            border-radius: 20px;
            padding: 20px;
            margin: 10px 0;
            box-shadow: 0 5px 20px rgba(0,0,0,0.05);
        }}
        .booking-card {{
            border: 2px solid #ffdddd;
            background: #fffafa;
        }}
        .privilege-card {{
            background: linear-gradient(135deg, #00b894, #00a085);
            color: white;
        }}
        .economy-highlight {{
            background: linear-gradient(45deg, #ffd700, #ffb347);
            color: #333;
            padding: 15px;
            border-radius: 15px;
            text-align: center;
            margin-top: 20px;
            font-weight: bold;
            font-size: 1.1em;
        }}
        .api-badge {{
            background: #e8f5e8;
            color: #2d5a2d;
            padding: 2px 8px;
            border-radius: 12px;
            font-size: 10px;
            font-weight: bold;
        }}
    </style>
</head>
<body>
    <div class="mobile-optimized">
        <!-- Instagram-style Header -->
        <div class="instagram-header">
            <img src="https://static.wixstatic.com/media/5ca515_449af35c8bea462986caf4fd28e02398~mv2.png" alt="Logo Voyages Privil√®ges" class="mx-auto h-20">
            <p class="api-badge mt-2">Donn√©es 100% r√©elles via APIs</p>
        </div>

        <!-- Hero Story Card -->
        <div class="story-card">
            <div class="mb-6">
                <img src="{real_data['photos'][0] if real_data['photos'] else 'https://via.placeholder.com/800x400?text=Aucune+photo+disponible'}" alt="{data['hotel_name']}" class="w-full h-64 object-cover rounded-lg mb-4 shadow-lg">
            </div>
            <h2 class="text-xl font-bold mb-2">{data['hotel_name']} {stars}</h2>
            <p class="text-base mb-2">üìç {data['destination']}</p>
            <p class="text-sm mb-4">üóìÔ∏è Du {date_start} au {date_end}</p>
            <div class="text-3xl font-bold mb-2">{data['price']} ‚Ç¨</div>
            <p class="text-sm">pour 2 personnes</p>
            {f'<p class="text-xs mt-2">Note Google: {real_data["hotel_rating"]}/5 ({real_data["total_reviews"]} avis)</p>' if real_data['hotel_rating'] > 0 else ''}
        </div>

        <!-- Ce qui est inclus -->
        <div class="instagram-card">
            <div class="p-6">
                <h3 class="section-title text-lg"><i class="fas fa-check-circle text-green-500 mr-2"></i>Inclus dans votre s√©jour</h3>
                <div class="space-y-5">
                    <div class="flex items-center"><div class="feature-icon bg-blue-500"><i class="fas fa-plane"></i></div><div class="ml-4"><h4 class="font-semibold text-sm">Vol {data['departure_city']} ‚Üî {data['destination']}</h4><p class="text-gray-600 text-xs">Aller-retour inclus</p></div></div>
                    <div class="flex items-center"><div class="feature-icon bg-green-500"><i class="fas fa-bus"></i></div><div class="ml-4"><h4 class="font-semibold text-sm">Transfert a√©roport ‚Üî h√¥tel</h4><p class="text-gray-600 text-xs">Prise en charge compl√®te</p></div></div>
                    <div class="flex items-center"><div class="feature-icon bg-purple-500"><i class="fas fa-hotel"></i></div><div class="ml-4"><h4 class="font-semibold text-sm">H√¥tel {stars} {data['hotel_name']}</h4><p class="text-gray-600 text-xs">Style traditionnel</p></div></div>
                    <div class="flex items-center"><div class="feature-icon bg-yellow-500"><i class="fas fa-utensils"></i></div><div class="ml-4"><h4 class="font-semibold text-sm">Pension compl√®te</h4><p class="text-gray-600 text-xs">Tous les repas inclus</p></div></div>
                    <div class="flex items-center"><div class="feature-icon bg-red-500"><i class="fas fa-suitcase"></i></div><div class="ml-4"><h4 class="font-semibold text-sm">Bagages 10kg</h4><p class="text-gray-600 text-xs">Bagage cabine inclus</p></div></div>
                    <div class="flex items-center"><div class="feature-icon bg-gray-500"><i class="fas fa-shield-alt"></i></div><div class="ml-4"><h4 class="font-semibold text-sm">Assurance & Assistance</h4><p class="text-gray-600 text-xs">(en option)</p></div></div>
                </div>
            </div>
        </div>

        <!-- Comparaison de prix -->
        <div class="instagram-card">
            <div class="p-6">
                <h3 class="section-title text-lg">üí∞ Pourquoi nous choisir ?</h3>
                <div class="comparison-card booking-card">
                    <h4 class="font-bold text-sm mb-4 text-center text-gray-700"><img src="https://logo.clearbit.com/booking.com" alt="Booking.com" class="h-5 inline mr-2"> Prix estim√© ailleurs</h4>
                    <div class="space-y-2 text-gray-800 text-xs">
                        <div class="flex justify-between"><span>H√¥tel (demi-pension)</span><span class="font-semibold">{int(data['booking_price']) - 300} ‚Ç¨</span></div>
                        <div class="flex justify-between"><span>+ Vol {data['departure_city']} - {data['destination']}</span><span class="font-semibold">~500‚Ç¨</span></div>
                        <div class="flex justify-between"><span>+ Transferts</span><span class="font-semibold">~150‚Ç¨</span></div>
                        <div class="flex justify-between"><span>+ Surco√ªt Pension compl√®te</span><span class="font-semibold">~150‚Ç¨</span></div>
                        <hr class="my-3"><div class="flex justify-between text-base font-bold text-red-600"><span>TOTAL</span><span>{data['booking_price']} ‚Ç¨</span></div>
                    </div>
                </div>
                <div class="comparison-card privilege-card">
                    <h4 class="font-bold text-sm mb-4 text-center">‚úàÔ∏è Notre Offre Voyages Privil√®ges</h4>
                    <div class="space-y-2 text-xs">
                        <div class="flex justify-between items-center"><span>Forfait Essentiel (Vol+H√¥tel+Transferts)</span><i class="fas fa-check-circle text-lg"></i></div>
                        <div class="flex justify-between items-center"><span>Service complet</span><i class="fas fa-check-circle text-lg"></i></div>
                        <div class="flex justify-between items-center"><span>Prix n√©goci√©</span><i class="fas fa-check-circle text-lg"></i></div>
                        <hr class="my-3 border-white border-opacity-30"><div class="flex justify-between text-base font-bold"><span>VOTRE PRIX</span><span>{data['price']} ‚Ç¨</span></div>
                    </div>
                </div>
                <div class="economy-highlight">
                    üí∞ Vous √©conomisez {savings} ‚Ç¨ par rapport √† Booking.com !
                </div>
            </div>
        </div>

        <!-- Galerie d'images R√âELLES -->
        <div class="instagram-card">
            <div class="p-6">
                <h3 class="section-title text-lg">üì∏ Photos r√©elles de l'h√¥tel <span class="api-badge">Google Places API</span></h3>
                <div class="image-grid">
                    {image_gallery}
                </div>
            </div>
        </div>

        <!-- Vid√©os R√âELLES -->
        {f'<div class="instagram-card"><div class="p-6"><h3 class="section-title text-lg">üé• Vid√©os r√©elles <span class="api-badge">YouTube API</span></h3><div class="space-y-6">{video_section}</div></div></div>' if video_section else ''}

        <!-- Avis clients R√âELS -->
        <div class="instagram-card">
            <div class="p-6">
                <h3 class="section-title text-lg">‚≠ê Avis clients r√©els <span class="api-badge">Google Places API</span></h3>
                <div class="space-y-4">
                    {reviews_section}
                </div>
            </div>
        </div>

        <!-- D√©couvrir la destination R√âELLE -->
        <div class="instagram-card">
            <div class="p-6">
                <h3 class="section-title text-lg">üåç D√©couvrir {data['destination']} <span class="api-badge">Gemini API</span></h3>
                <div class="space-y-6">
                    {destination_section}
                </div>
            </div>
        </div>

        <!-- CTA Final -->
        <div class="instagram-card">
            <div class="p-6 text-center">
                <h3 class="section-title text-lg">‚úàÔ∏è Pr√™t pour l'aventure ?</h3>
                <p class="text-gray-600 mb-6">R√©servez d√®s maintenant votre s√©jour de r√™ve √† {data['destination']}</p>
                <a href="mailto:contact@voyagesprivileges.com" class="cta-button">
                    üìû R√©server maintenant
                </a>
                <p class="text-xs text-gray-500 mt-4">
                    üìß contact@voyagesprivileges.com | üìû +33 X XX XX XX XX
                </p>
            </div>
        </div>
    </div>
</body>
</html>"""

    return html_template

if __name__ == '__main__':
    app.run(host='127.0.0.1', port=5001, debug=False)

